{"version":3,"file":"static/js/119.8d148f012c1bfa874c56.js","sources":["webpack:///src/recycle-bin/farmdetail-map-other-废弃.vue"],"sourcesContent":["<template>\n\t<div class=\"arcgis-map\">\n\t\t<div class=\"map-container\" id=\"gismap\"></div>\n\t</div>\n</template>\n<script>\nimport esriLoader from 'esri-loader';\nimport areaSource from '@/common/data/shanghai-gis-source.js'; // arcgis 资源库\nimport getGisToken from '@/common/fn/devGetGisToken.js';\nimport * as turf from 'turf';\nimport {landcolorMap, landNameMap, zhutiTypeMap, attrNameMap} from '@/common/data/gis-landinfo-map.js';\nimport {getStorage} from '@/utils/storage';\nimport 'styles/homemap.css';\n\nexport default {\n\tinject: ['farmDetailRefs'],\n\tdata() {\n\t\treturn {\n\t\t\tgismap: null,\n\t\t\tgisloading: true,\n\t\t\ttemptoken: '',\n\t\t\ttileMap: {\n\t\t\t\t// weixing: '/shanghaiArcGIS/rest/services/SHMAP_IMAGE/MapServer',\n\t\t\t\tweixing: '/shanghaiArcGIS/rest/services/SHMAP_IMAGE/MapServer'\n\t\t\t},\n\t\t\toptions: {url: 'http://gov.snkoudai.com/mapdemo/arcgis3.28/init.js'},\n\t\t\tallPlotMarkerLayer: null, // 所有地块 农作物图片marker GraphicsLayer层\n\t\t\tallPlotPolygonLayer: null, // 所有地块多边形 GraphicsLayer层\n\t\t\tactivePlotsLayer: null, // 标红选中 地块多边形 GraphicsLayer层\n\t\t\tgreenCertPlotsLayer: null, // 绿色认证地块多边形 GraphicsLayer层\n\t\t\tserviceMap: {\n\t\t\t\tnongyongdi: '',\n\t\t\t\tdapeng: '',\n\t\t\t\thezuosheNaturalBorder: '' // 合作社自然边界\n\t\t\t},\n\t\t\thomeLatLng: [121.12961431068945, 30.979833911253177, 121.69403691811132, 31.266851733518802], // 初始化位置\n\t\t\t// 地块详情 弹框\n\t\t\twxLayerUpdateEnd: false,\n\t\t\tplotidMapImg: {}\n\t\t};\n\t},\n\tprops: {\n\t\tlandList: {\n\t\t\tdefault() {\n\t\t\t\treturn [];\n\t\t\t},\n\t\t\ttype: Array\n\t\t},\n\t\tcropList: {\n\t\t\tdefault() {\n\t\t\t\treturn [];\n\t\t\t},\n\t\t\ttype: Array\n\t\t}\n\t},\n\tcomputed: {\n\t\tlandGisIds() {\n\t\t\treturn this.landList.map(item => {\n\t\t\t\treturn item.gisPlotId;\n\t\t\t});\n\t\t}\n\t},\n\tasync mounted() {\n\t\tawait this.init();\n\t\t// 渲染多边形和marker\n\t\tif (this.landList.length) {\n\t\t\t// 渲染多边形和marker\n\t\t\tvar allFeature = await this.renderPlotToMap(this.landList);\n\t\t\t// 标注landList 状态\n\t\t\tallFeature.forEach((item, index) => {\n\t\t\t\tvar plotid = item.attributes.DPDKID || item.attributes.DKID;\n\t\t\t\tthis.landList.forEach(plot => {\n\t\t\t\t\tif (plot.gisPlotId === plotid) {\n\t\t\t\t\t\tplot.hasArea = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tthis.$parent.gisloading = false;\n\t},\n\tmethods: {\n\t\tinit() {\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tvar subjectVo = getStorage('govGovernmentSubjectVO');\n\t\t\t\tvar countyId = '310100'; // 默认上海市\n\t\t\t\tif (subjectVo && subjectVo.cityId && subjectVo.subjectLevel === 2) {\n\t\t\t\t\tcountyId = subjectVo.cityId;\n\t\t\t\t}\n\t\t\t\tif (subjectVo && subjectVo.countyId && subjectVo.subjectLevel === 3) {\n\t\t\t\t\tcountyId = subjectVo.countyId;\n\t\t\t\t}\n\t\t\t\tconsole.log(areaSource.hasOwnProperty(countyId));\n\t\t\t\tcountyId = areaSource.hasOwnProperty(countyId) ? countyId : '310100';\n\t\t\t\tthis.serviceMap.nongyongdi = areaSource[countyId].nongyongdi;\n\t\t\t\tthis.serviceMap.dapeng = areaSource[countyId].dapeng;\n\t\t\t\tthis.serviceMap.hezuosheNaturalBorder = areaSource[countyId].hezuosheNaturalBorder;\n\t\t\t\tthis.homeLatLng = areaSource[countyId].centerExtend;\n\t\t\t\t// 动态获取gis服务token\n\t\t\t\tthis.temptoken = await getGisToken(this);\n\t\t\t\t// 初始化地图\n\t\t\t\tthis.$nextTick(async () => {\n\t\t\t\t\tawait this.initMap();\n\t\t\t\t\tvar result = await this.listenrMapInitStatus();\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdojo.connect(this.gismap, 'onClick', this.searchPointer);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t// 初始化渲染地图\n\t\tinitMap() {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'esri/map',\n\t\t\t\t\t\t\t'esri/layers/ArcGISTiledMapServiceLayer',\n\t\t\t\t\t\t\t'esri/layers/ArcGISDynamicMapServiceLayer',\n\t\t\t\t\t\t\t'esri/layers/ImageParameters',\n\t\t\t\t\t\t\t'esri/geometry/Point',\n\t\t\t\t\t\t\t'esri/SpatialReference',\n\t\t\t\t\t\t\t'esri/geometry/Extent',\n\t\t\t\t\t\t\t'esri/layers/GraphicsLayer'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tthis.options\n\t\t\t\t\t)\n\t\t\t\t\t.then(\n\t\t\t\t\t\t([Map, ArcGISTiledMapServiceLayer, ArcGISDynamicMapServiceLayer, ImageParameters, Point, SpatialReference, Extent, GraphicsLayer]) => {\n\t\t\t\t\t\t\tvar This = this;\n\t\t\t\t\t\t\tvar startExtent = new Extent(...this.homeLatLng, new esri.SpatialReference({wkid: 4326}));\n\t\t\t\t\t\t\tconst mapview = new Map('gismap', {\n\t\t\t\t\t\t\t\textent: startExtent,\n\t\t\t\t\t\t\t\tlogo: false,\n\t\t\t\t\t\t\t\toptimizePanAnimation: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdojo.connect(mapview, 'onExtentChange', () => {});\n\t\t\t\t\t\t\tdojo.connect(mapview, 'onZoomEnd', function(e) {\n\t\t\t\t\t\t\t\tvar zoom = mapview.getZoom();\n\t\t\t\t\t\t\t\tThis.updateMarker(This.allPlotMarkerLayer.graphics, zoom + 10);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t// 卫星地图\n\t\t\t\t\t\t\tvar tiledLayer3 = new ArcGISTiledMapServiceLayer(this.tileMap.weixing, {id: 'weixing_ditu'});\n\t\t\t\t\t\t\ttiledLayer3.on('update-end', function(e) {\n\t\t\t\t\t\t\t\tconsole.log(e.error);\n\t\t\t\t\t\t\t\tThis.wxLayerUpdateEnd = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tmapview.addLayer(tiledLayer3);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\tconsole.log('报错');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// 所有地块 多边形渲染图层 初始化\n\t\t\t\t\t\t\tthis.allPlotPolygonLayer = new GraphicsLayer({visible: true});\n\t\t\t\t\t\t\tmapview.addLayer(this.allPlotPolygonLayer);\n\t\t\t\t\t\t\t// 绿色认证地块渲染图层 初始化\n\t\t\t\t\t\t\tthis.greenCertPlotsLayer = new GraphicsLayer({visible: true});\n\t\t\t\t\t\t\tmapview.addLayer(this.greenCertPlotsLayer);\n\t\t\t\t\t\t\t// 选中多边形渲染图层 初始化\n\t\t\t\t\t\t\tthis.activePlotsLayer = new GraphicsLayer({visible: true});\n\t\t\t\t\t\t\tmapview.addLayer(this.activePlotsLayer);\n\t\t\t\t\t\t\t// 所有地块 marker渲染图层 初始化\n\t\t\t\t\t\t\tthis.allPlotMarkerLayer = new GraphicsLayer({visible: true});\n\t\t\t\t\t\t\tmapview.addLayer(this.allPlotMarkerLayer);\n\t\t\t\t\t\t\tthis.gismap = mapview;\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t},\n\t\t\t\t\t\treason => {\n\t\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t});\n\t\t},\n\t\tlistenrMapInitStatus() {\n\t\t\tvar This = this;\n\t\t\tvar mapInitOk = false;\n\t\t\tvar nowpath = This.$route.path;\n\t\t\tfunction loadmap() {\n\t\t\t\treturn new Promise(async resolve => {\n\t\t\t\t\tfunction isok() {\n\t\t\t\t\t\tif (This.$route.path !== nowpath) return;\n\t\t\t\t\t\tif (mapInitOk) return;\n\t\t\t\t\t\tvar firstlayerdom = document.getElementById('gismap_weixing_ditu');\n\t\t\t\t\t\tif (firstlayerdom && firstlayerdom.innerHTML !== '') {\n\t\t\t\t\t\t\tmapInitOk = true;\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar timer1 = setTimeout(isok, 200);\n\t\t\t\t\tsetTimeout(isok, 500);\n\t\t\t\t\tsetTimeout(isok, 1000);\n\t\t\t\t\tsetTimeout(isok, 2000);\n\t\t\t\t\tsetTimeout(isok, 4000);\n\t\t\t\t\tsetTimeout(isok, 5000);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (This.$route.path !== nowpath) return;\n\t\t\t\t\t\tif (mapInitOk) return;\n\t\t\t\t\t\tvar firstlayerdom = document.getElementById('gismap_weixing_ditu');\n\t\t\t\t\t\tif (!firstlayerdom || firstlayerdom.innerHTML === '') {\n\t\t\t\t\t\t\tdocument.getElementById('gismap').innerHTML = '';\n\t\t\t\t\t\t\tconsole.log('天地图加载有问题 重新加载');\n\t\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmapInitOk = true;\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 7000);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tvar result = await loadmap(loadmap);\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t},\n\t\tinitServerLayer(type = 'nongyongdi') {\n\t\t\t// 初始化 动态服务图层\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tvar service = this.serviceMap[type] + '?token=' + this.temptoken;\n\t\t\t\tesriLoader.loadModules(['esri/layers/ArcGISDynamicMapServiceLayer'], this.options).then(\n\t\t\t\t\t([ArcGISDynamicMapServiceLayer]) => {\n\t\t\t\t\t\tvar serverLayer = new esri.layers.ArcGISDynamicMapServiceLayer(service, {\n\t\t\t\t\t\t\tid: type,\n\t\t\t\t\t\t\toutFields: ['*']\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(serverLayer);\n\t\t\t\t\t},\n\t\t\t\t\treason => {\n\t\t\t\t\t\tconsole.log(reason);\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t},\n\t\t// 渲染地块多边形 maker\n\t\trenderAllPolygon(features, layer, borderType = 1) {\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tif (!features.length) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar [graphics, graphicOptions] = await this.mergePolygonRander(features, borderType);\n\t\t\t\tgraphics.map(graphic => {\n\t\t\t\t\tlayer.add(graphic);\n\t\t\t\t});\n\t\t\t\t// 记录数据\n\t\t\t\tvar plotFeaturesData = {};\n\t\t\t\tgraphicOptions.map(item => {\n\t\t\t\t\tplotFeaturesData[item.plotid] = item;\n\t\t\t\t});\n\t\t\t\tlayer.plotFeatures = Object.assign({}, plotFeaturesData);\n\t\t\t\tresolve();\n\t\t\t});\n\t\t},\n\t\tmergePolygonRander(features, borderType) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(['esri/graphic', 'esri/geometry/Polygon', 'esri/SpatialReference', 'esri/symbols/SimpleFillSymbol', 'esri/symbols/SimpleLineSymbol'], this.options)\n\t\t\t\t\t.then(([Graphic, Polygon, SpatialReference, SimpleFillSymbol, SimpleLineSymbol]) => {\n\t\t\t\t\t\tif (features.length === 0) {\n\t\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 根据样式汇总 不同polygon\n\t\t\t\t\t\tvar graphicAll = {};\n\t\t\t\t\t\tvar featureOptions = [];\n\t\t\t\t\t\tvar borderwidth = borderType === 1 ? 4 : 1;\n\t\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\n\t\t\t\t\t\t\tvar [areaColor, borderColor] = this.getNowAreaColor(features[i], borderType);\n\t\t\t\t\t\t\tvar rings = JSON.parse(JSON.stringify(features[i].geometry.rings));\n\t\t\t\t\t\t\tvar key = (areaColor + borderColor + borderwidth).split(',').join('');\n\t\t\t\t\t\t\tvar plotid = features[i].attributes.DPDKID || features[i].attributes.DKID;\n\t\t\t\t\t\t\tfeatureOptions.push({plotid: plotid, plotplusid: this.getNYDid(plotid), areaColor: areaColor, borderColor: borderColor, borderwidth: borderwidth, rings: rings});\n\t\t\t\t\t\t\tif (!graphicAll[key]) {\n\t\t\t\t\t\t\t\tgraphicAll[key] = {\n\t\t\t\t\t\t\t\t\tareaColor: areaColor,\n\t\t\t\t\t\t\t\t\tborderColor: borderColor,\n\t\t\t\t\t\t\t\t\tborderwidth: borderwidth,\n\t\t\t\t\t\t\t\t\trings: rings\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar rings = JSON.parse(JSON.stringify(features[i].geometry.rings));\n\t\t\t\t\t\t\t\tgraphicAll[key].rings = graphicAll[key].rings.concat(rings);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 生成 所有graphic\n\t\t\t\t\t\tvar polygons = [];\n\t\t\t\t\t\tfor (var k in graphicAll) {\n\t\t\t\t\t\t\tvar {areaColor, borderColor, borderwidth, rings} = graphicAll[k];\n\t\t\t\t\t\t\tconst symbol = new SimpleFillSymbol(\n\t\t\t\t\t\t\t\tSimpleFillSymbol.STYLE_SOLID,\n\t\t\t\t\t\t\t\tnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new dojo.Color(borderColor), borderwidth),\n\t\t\t\t\t\t\t\tnew dojo.Color([...areaColor, 0.3])\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvar polygon = new Polygon(new SpatialReference({wkid: 4326}));\n\t\t\t\t\t\t\tfor (var j = 0, len = rings.length; j < len; j++) {\n\t\t\t\t\t\t\t\tpolygon.addRing(rings[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpolygons.push(new Graphic(polygon, symbol));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve([polygons, featureOptions]);\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tupdateFeature(plotids, allplotdata, layer, styleOption = {}) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(['esri/graphic', 'esri/geometry/Polygon', 'esri/SpatialReference', 'esri/symbols/SimpleFillSymbol', 'esri/symbols/SimpleLineSymbol'], this.options)\n\t\t\t\t\t.then(([Graphic, Polygon, SpatialReference, SimpleFillSymbol, SimpleLineSymbol]) => {\n\t\t\t\t\t\t// 如果为空 直接清空图层 并返回\n\t\t\t\t\t\tif (!plotids.length) {\n\t\t\t\t\t\t\tlayer.clear();\n\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar hasSelect = false;\n\t\t\t\t\t\tvar graphicAll = {};\n\t\t\t\t\t\tvar polygon = new Polygon(new SpatialReference({wkid: 4326}));\n\t\t\t\t\t\tplotids.map(plotid => {\n\t\t\t\t\t\t\tif (allplotdata.hasOwnProperty(plotid)) {\n\t\t\t\t\t\t\t\thasSelect = true;\n\t\t\t\t\t\t\t\tvar [areacolor, bordercolor] = this.getNowAreaColor(allplotdata[plotid], 2);\n\t\t\t\t\t\t\t\tvar {stroke = bordercolor, fillOpacity = 0.3, fill = areacolor} = styleOption;\n\t\t\t\t\t\t\t\tvar rings = JSON.parse(JSON.stringify(allplotdata[plotid].rings));\n\t\t\t\t\t\t\t\tvar key = (fill + stroke + fillOpacity).split(',').join('');\n\t\t\t\t\t\t\t\tif (!graphicAll[key]) {\n\t\t\t\t\t\t\t\t\tgraphicAll[key] = {\n\t\t\t\t\t\t\t\t\t\tareaColor: fill,\n\t\t\t\t\t\t\t\t\t\tborderColor: stroke,\n\t\t\t\t\t\t\t\t\t\tborderwidth: 4,\n\t\t\t\t\t\t\t\t\t\tfillOpacity: fillOpacity,\n\t\t\t\t\t\t\t\t\t\trings: rings\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar rings = JSON.parse(JSON.stringify(allplotdata[plotid].rings));\n\t\t\t\t\t\t\t\t\tgraphicAll[key].rings = graphicAll[key].rings.concat(rings);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (hasSelect) {\n\t\t\t\t\t\t\tfor (var k in graphicAll) {\n\t\t\t\t\t\t\t\tvar {areaColor, borderColor, borderwidth, fillOpacity, rings} = graphicAll[k];\n\t\t\t\t\t\t\t\tconst symbol = new SimpleFillSymbol(\n\t\t\t\t\t\t\t\t\tSimpleFillSymbol.STYLE_SOLID,\n\t\t\t\t\t\t\t\t\tnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new dojo.Color(borderColor), borderwidth),\n\t\t\t\t\t\t\t\t\tnew dojo.Color([...areaColor, fillOpacity])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvar polygon = new Polygon(new SpatialReference({wkid: 4326}));\n\t\t\t\t\t\t\t\tfor (var j = 0, len = rings.length; j < len; j++) {\n\t\t\t\t\t\t\t\t\tpolygon.addRing(rings[j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlayer.add(new Graphic(polygon, symbol));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(hasSelect);\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\trenderAllMarker(features, layer, zoom = 17) {\n\t\t\tvar This = this;\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tif (features.length === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(['esri/graphic', 'esri/geometry/Point', 'esri/symbols/PictureMarkerSymbol', 'esri/SpatialReference'], this.options)\n\t\t\t\t\t.then(([Graphic, Point, PictureMarkerSymbol, SpatialReference]) => {\n\t\t\t\t\t\tfor (let i = 0; i < features.length; i++) {\n\t\t\t\t\t\t\tvar rings = JSON.parse(JSON.stringify(features[i].geometry.rings));\n\t\t\t\t\t\t\tvar plotid = features[i].attributes.DPDKID || features[i].attributes.DKID;\n\t\t\t\t\t\t\tvar markerImg = This.aliimgCircle(This.plotidMapImg[plotid], 48);\n\t\t\t\t\t\t\tinitMarker(rings, markerImg, layer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfunction initMarker(polygonpath, marksrc, layer) {\n\t\t\t\t\t\t\tvar pointers = [];\n\t\t\t\t\t\t\tpolygonpath[0].map(item => {\n\t\t\t\t\t\t\t\titem.length === 2 && pointers.push(item);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvar turfPointers = [];\n\t\t\t\t\t\t\tpointers.map(item => {\n\t\t\t\t\t\t\t\titem.length === 2 && turfPointers.push(turf.point(item));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvar features = turf.featureCollection(turfPointers);\n\t\t\t\t\t\t\tvar center = turf.center(features);\n\t\t\t\t\t\t\tvar [wh, offsetxy] = This.computeMarkerPosAnchor(zoom);\n\t\t\t\t\t\t\tvar point = new Point(center.geometry.coordinates, new SpatialReference({wkid: 4326}));\n\t\t\t\t\t\t\tvar pictureMarkerSymbol = new PictureMarkerSymbol({url: marksrc, width: wh[0], height: wh[1], xoffset: offsetxy[0], yoffset: offsetxy[1]});\n\t\t\t\t\t\t\tlayer.add(new Graphic(point, pictureMarkerSymbol));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tupdateMarker(graphics = [], zoom) {\n\t\t\tconsole.log('updateMarker');\n\t\t\tgraphics.map(graphic => {\n\t\t\t\tvar markerSymbol = graphic.symbol;\n\t\t\t\tvar [wh, offsetxy] = this.computeMarkerPosAnchor(zoom);\n\t\t\t\tmarkerSymbol.setWidth(wh[0]);\n\t\t\t\tmarkerSymbol.setHeight(wh[1]);\n\t\t\t\tmarkerSymbol.setOffset(...offsetxy);\n\t\t\t});\n\t\t},\n\t\tcomputeMarkerPosAnchor: function(zoom, markerlen = 1, markerindex = 0, isSmallArea = false) {\n\t\t\t// 计算marker位置大小 根据中心点，marker数量，序号 综合计算位置以及大小\n\t\t\tvar iconposArr = [\n\t\t\t\t[],\n\t\t\t\t[[0, 0]],\n\t\t\t\t[\n\t\t\t\t\t[24, 12],\n\t\t\t\t\t[0, 12]\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t[12, 24],\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[24, 0]\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t[24, 24],\n\t\t\t\t\t[0, 24],\n\t\t\t\t\t[0, 0],\n\t\t\t\t\t[24, 0]\n\t\t\t\t]\n\t\t\t]; // 相对marker宽高为 24px\n\t\t\tvar zoomWithWidthMap = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 2, 9: 4, 10: 4, 11: 4, 12: 6, 13: 8, 14: 8, 15: 8, 16: 12, 17: 16, 18: 24, 19: 32, 20: 40, 21: 48, 22: 56};\n\t\t\tvar zoomWithWidthSmallMap = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 2, 9: 4, 10: 4, 11: 4, 12: 6, 13: 6, 14: 6, 15: 6, 16: 8, 17: 8, 18: 12, 19: 18, 20: 36, 21: 42, 22: 48};\n\t\t\tvar width = isSmallArea ? zoomWithWidthSmallMap[zoom] : zoomWithWidthMap[zoom];\n\t\t\tvar iconposArrright = iconposArr.map(function(item) {\n\t\t\t\titem.map(itemplus => {\n\t\t\t\t\titemplus[0] = parseInt((itemplus[0] * width) / 24);\n\t\t\t\t\titemplus[1] = parseInt((itemplus[1] * width) / 24);\n\t\t\t\t\treturn itemplus;\n\t\t\t\t});\n\t\t\t\treturn item;\n\t\t\t});\n\t\t\tvar anchor = iconposArrright[markerlen][markerindex];\n\t\t\treturn [[width, width], anchor];\n\t\t},\n\t\taliimgCircle(imgsrc, radius) {\n\t\t\tradius = radius || 100;\n\t\t\tif (imgsrc && imgsrc.indexOf('.aliyuncs.com/') !== -1) {\n\t\t\t\tvar newimgstr = imgsrc + '?x-oss-process=image/resize,w_' + radius + ',h_' + radius + ',m_fill/auto-orient,1/quality,q_100/sharpen,80/format,png';\n\t\t\t\treturn newimgstr;\n\t\t\t} else {\n\t\t\t\treturn imgsrc;\n\t\t\t}\n\t\t},\n\t\tgetCenterAZoom(allfeatures, type = 'company') {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tvar xmin = [];\n\t\t\t\tvar ymin = [];\n\t\t\t\tvar xmax = [];\n\t\t\t\tvar ymax = [];\n\t\t\t\tfor (var i = 0; i < allfeatures.length; i++) {\n\t\t\t\t\tvar oneextent = allfeatures[i].geometry.getExtent();\n\t\t\t\t\txmin.push(oneextent.xmin);\n\t\t\t\t\tymin.push(oneextent.ymin);\n\t\t\t\t\txmax.push(oneextent.xmax);\n\t\t\t\t\tymax.push(oneextent.ymax);\n\t\t\t\t}\n\t\t\t\t// 第一个点 是 左下角 x lng取最小值 y lat取最小值\n\t\t\t\t// 第二个点 是 右上角 x lng取最大值 y lat取最大值\n\t\t\t\tvar newxmin = Math.min.apply(null, xmin);\n\t\t\t\tvar newymin = Math.min.apply(null, ymin);\n\t\t\t\tvar newxmax = Math.max.apply(null, xmax);\n\t\t\t\tvar newymax = Math.max.apply(null, ymax);\n\t\t\t\tvar offsetpointerarr = offsetHander([newxmin, newymin, newxmax, newymax], type);\n\t\t\t\tesriLoader.loadModules(['esri/geometry/Extent', 'esri/layers/GraphicsLayer'], this.options).then(([Extent, GraphicsLayer]) => {\n\t\t\t\t\tvar startExtent = new Extent(...offsetpointerarr, new esri.SpatialReference({wkid: 4326}));\n\t\t\t\t\tthis.gismap.setExtent(startExtent);\n\t\t\t\t\tvar specialshow = Boolean(offsetpointerarr[2] - offsetpointerarr[0] > 0.05 || offsetpointerarr[3] - offsetpointerarr[1] > 0.05);\n\t\t\t\t\tresolve(specialshow);\n\t\t\t\t});\n\t\t\t});\n\t\t\tfunction offsetHander(twopointer, type) {\n\t\t\t\t// offsetval 0-100 (%) 上下偏移百分之多少\n\t\t\t\tif (twopointer.length !== 4) return [];\n\t\t\t\t// 左下角 右上角\n\t\t\t\tvar xo = twopointer[2] - twopointer[0];\n\t\t\t\tvar yo = twopointer[3] - twopointer[1];\n\t\t\t\tvar centerxy = [twopointer[0] + xo / 2, twopointer[1] + yo / 2];\n\t\t\t\tif (type === 'company') {\n\t\t\t\t\tvar xcha = xo * (50 * 0.01 * 0.5);\n\t\t\t\t\tvar ycha = yo * (50 * 0.01 * 0.5);\n\t\t\t\t\treturn [twopointer[0] - xcha * 5, twopointer[1] - ycha, twopointer[2] + xcha * 5, twopointer[3] + ycha * 1.5];\n\t\t\t\t} else if (type === 'plot') {\n\t\t\t\t\tvar xcha = xo;\n\t\t\t\t\tvar ycha = yo;\n\t\t\t\t\treturn [twopointer[0] - xcha, twopointer[1] - ycha, twopointer[2] + xcha, twopointer[3] + ycha * 6];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// 点击点查询\n\t\tasync searchPointer(evt) {\n\t\t\t// 清空点击地图前交互\n\t\t\tthis.layersHander(); // 清空地块点击层\n\t\t\tthis.gismap.infoWindow.hide(); // 关闭gis info弹框\n\t\t\t// 通过gis地块id 查询gis大棚服务  拿到gis地块id 拉接口查询是否有 神农口袋地块id\n\t\t\tvar [status, plotresult] = await this.queryOnePointer(evt, 'dapeng');\n\t\t\tif (status) {\n\t\t\t\t// 是大棚\n\t\t\t\tvar gisDkid = plotresult.features[0].attributes.DPDKID || '';\n\t\t\t\tif (gisDkid && this.landGisIds.includes(gisDkid)) {\n\t\t\t\t\tthis.$parent.cropLandActive(gisDkid, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 通过gis地块id 查询gis农用地服务  拿到gis地块id 拉接口查询是否有 神农 口袋地块id\n\t\t\tvar [status2, plotresult2] = await this.queryOnePointer(evt, 'nongyongdi');\n\t\t\tif (status2) {\n\t\t\t\t// 是农用地\n\t\t\t\tvar gisDkid2 = plotresult2.features[0].attributes.DKID || '';\n\t\t\t\tif (gisDkid2 && this.landGisIds.includes(gisDkid2)) {\n\t\t\t\t\tthis.$parent.cropLandActive(gisDkid2, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.log('当前地点无地块数据');\n\t\t\t}\n\t\t},\n\t\tlayersHander(type) {\n\t\t\tswitch (type) {\n\t\t\t\tcase 0: // 清空地块图层 activePlotsLayer\n\t\t\t\t\tthis.activePlotsLayer && this.activePlotsLayer.clear();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// 清空所有 地块选中及 搜索的企业地块\n\t\t\t\t\tthis.activePlotsLayer && this.activePlotsLayer.clear();\n\t\t\t\t\tthis.gismap.infoWindow.hide();\n\t\t\t}\n\t\t},\n\n\t\tqueryOnePointer(evt, type) {\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(['esri/tasks/QueryTask', 'esri/tasks/query', 'esri/symbols/SimpleFillSymbol', 'esri/symbols/SimpleLineSymbol'], this.options)\n\t\t\t\t\t.then(([QueryTask, query, SimpleFillSymbol, SimpleLineSymbol]) => {\n\t\t\t\t\t\tconst queryobj = new query();\n\t\t\t\t\t\tqueryobj.returnGeometry = true;\n\t\t\t\t\t\tqueryobj.outFields = ['*'];\n\t\t\t\t\t\tconst symbol = new SimpleFillSymbol(\n\t\t\t\t\t\t\tSimpleFillSymbol.STYLE_SOLID,\n\t\t\t\t\t\t\tnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 255, 255]), 4),\n\t\t\t\t\t\t\tnew dojo.Color([255, 255, 255, 0.5])\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvar nowserviceLayer = this.serviceMap[type] + '/0' + '?token=' + this.temptoken;\n\t\t\t\t\t\tvar queryTask = new QueryTask(nowserviceLayer);\n\t\t\t\t\t\tqueryobj.geometry = evt.mapPoint;\n\t\t\t\t\t\tqueryTask.execute(queryobj, async function(fset) {\n\t\t\t\t\t\t\t// console.log('________________ 单点查询结果 __________________');\n\t\t\t\t\t\t\t// console.log(fset);\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tfset &&\n\t\t\t\t\t\t\t\tfset.features &&\n\t\t\t\t\t\t\t\tfset.features.length > 0 &&\n\t\t\t\t\t\t\t\tfset.features[0].attributes &&\n\t\t\t\t\t\t\t\t(fset.features[0].attributes.hasOwnProperty('DPDKID') || fset.features[0].attributes.hasOwnProperty('DKID'))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tresolve([true, fset]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresolve([false, null]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tshowAreaInfo(map, evt, pointer) {\n\t\t\tif (!evt.features || evt.features.length == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tconst item = evt.features[0].attributes;\n\t\t\t\tif (item.hasOwnProperty('DPDKID')) {\n\t\t\t\t\tmap.infoWindow.setTitle('大棚: ' + item.DPDKID);\n\t\t\t\t} else {\n\t\t\t\t\tmap.infoWindow.setTitle('农用地: ' + item.DKID);\n\t\t\t\t}\n\t\t\t\tvar contenthtml = '<div class=\"plot-table-content\">';\n\t\t\t\tfor (var key in item) {\n\t\t\t\t\tvar value = item[key];\n\t\t\t\t\tvar landAcre = 0;\n\t\t\t\t\tif (key === 'Shape_Area') {\n\t\t\t\t\t\tvalue = toNonExponential(item.Shape_Area);\n\t\t\t\t\t} else if (key === 'SHAPE_Area') {\n\t\t\t\t\t\tvalue = toNonExponential(item.SHAPE_Area);\n\t\t\t\t\t}\n\t\t\t\t\tvar reg = new RegExp('[\\\\u4E00-\\\\u9FFF]+', 'g');\n\t\t\t\t\tif (!attrNameMap.hasOwnProperty(key) && !reg.test(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar name = attrNameMap.hasOwnProperty(key) ? attrNameMap[key] : key;\n\t\t\t\t\tvalue = name === '地块类型' && landNameMap.hasOwnProperty(value) ? landNameMap[value] : value;\n\t\t\t\t\tvalue = name === '主体类型' && zhutiTypeMap.hasOwnProperty(value) ? zhutiTypeMap[value] : value;\n\t\t\t\t\tif (!!item[key] && item[key] !== '' && item[key] !== ' ' && item[key] !== '  ') {\n\t\t\t\t\t\tcontenthtml += `<div><span class=\"title pyc\">${name}</span><p>${value}</p></div>`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontenthtml += '</div>';\n\t\t\t\tmap.infoWindow.setContent(contenthtml);\n\t\t\t\tmap.infoWindow.show(pointer, map.getInfoWindowAnchor(pointer));\n\t\t\t\tmap.infoWindow.domNode.querySelector('.titleButton.close').addEventListener('click', () => {\n\t\t\t\t\tthis.layersHander();\n\t\t\t\t});\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfunction toNonExponential(num) {\n\t\t\t\tvar num = num;\n\t\t\t\tif (/\\d+e[+-]\\d/g.test(num) || num < 0.0001) {\n\t\t\t\t\tnum = num * 16000000;\n\t\t\t\t} else {\n\t\t\t\t\tnum = parseFloat(num / 666.66666666667);\n\t\t\t\t}\n\t\t\t\tvar m = num.toExponential().match(/\\d(?:\\.(\\d*))?e([+-]\\d+)/);\n\t\t\t\treturn num.toFixed(Math.max(0, (m[1] || '').length - m[2]));\n\t\t\t}\n\t\t},\n\n\t\tgetNowAreaColor(item, borderType) {\n\t\t\tif (!item || !item.attributes || !(item.attributes['土地类型'] || item.attributes.TYPE || item.attributes.LANDTYPE)) {\n\t\t\t\treturn [\n\t\t\t\t\t[51, 98, 2],\n\t\t\t\t\t[255, 0, 0]\n\t\t\t\t];\n\t\t\t}\n\t\t\tvar colorstr = item.attributes['土地类型'] || item.attributes.TYPE || item.attributes.LANDTYPE;\n\t\t\tif (!landcolorMap.hasOwnProperty(colorstr)) {\n\t\t\t\treturn [\n\t\t\t\t\t[201, 242, 208],\n\t\t\t\t\t[165, 165, 165]\n\t\t\t\t];\n\t\t\t}\n\t\t\tif (item.attributes['土地类型']) {\n\t\t\t\t// 农用地\n\t\t\t\tif (borderType === 1) {\n\t\t\t\t\treturn [landcolorMap[colorstr], [255, 0, 0]];\n\t\t\t\t} else if (borderType === 2) {\n\t\t\t\t\treturn [landcolorMap[colorstr], [215, 116, 85]];\n\t\t\t\t} else {\n\t\t\t\t\treturn [landcolorMap[colorstr], landcolorMap[colorstr]];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (borderType === 1) {\n\t\t\t\t\treturn [landcolorMap[colorstr], [255, 0, 0]];\n\t\t\t\t} else if (borderType === 2) {\n\t\t\t\t\treturn [landcolorMap[colorstr], [215, 116, 85]];\n\t\t\t\t} else {\n\t\t\t\t\treturn [landcolorMap[colorstr], [165, 165, 165]];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\trenderPlotToMap(landList) {\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\t// 数据整理\n\t\t\t\tvar gisPlotIds = landList.map(item => {\n\t\t\t\t\tthis.plotidMapImg[item.gisPlotId] = item.imgUrl; // 汇总地块marker {'gisid':'gis地块图片'}\n\t\t\t\t\treturn item.gisPlotId;\n\t\t\t\t});\n\t\t\t\tvar [status, features] = await this.goMorePlotsWithId('nongyongdi', gisPlotIds);\n\t\t\t\tvar [status2, features2] = await this.goMorePlotsWithId('dapeng', gisPlotIds);\n\t\t\t\tvar allFeature = [];\n\t\t\t\tif (status && features.length > 0) {\n\t\t\t\t\tallFeature.push(...features);\n\t\t\t\t}\n\t\t\t\tif (status2 && features2.length > 0) {\n\t\t\t\t\tallFeature.push(...features2);\n\t\t\t\t}\n\t\t\t\t// 渲染地块多边形\n\t\t\t\tawait this.renderAllPolygon(allFeature, this.allPlotPolygonLayer, 2);\n\t\t\t\tawait this.renderAllMarker(allFeature, this.allPlotMarkerLayer, 17);\n\t\t\t\tif (status || status2) {\n\t\t\t\t\t// 有地图\n\t\t\t\t\tawait this.getCenterAZoom(allFeature);\n\t\t\t\t} else {\n\t\t\t\t\tthis.$message({\n\t\t\t\t\t\ttype: 'warning',\n\t\t\t\t\t\toffset: 100,\n\t\t\t\t\t\tduration: 2000,\n\t\t\t\t\t\tmessage: '未搜索到对应地块'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresolve(allFeature);\n\t\t\t});\n\t\t},\n\t\tasync goMorePlotsWithId(type, plotlist) {\n\t\t\t// 根据gis地块id 集合 查询对应features 集合\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tif (!plotlist || plotlist.length === 0) {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//* *************** 为了性能考虑 现在只取前1000个 plotlist.slice(0,1000) ****************\n\t\t\t\tvar plotidlist = arrToThousandArr(JSON.parse(JSON.stringify(plotlist)), 1000); // 拆成 一千个为一组的数组\n\t\t\t\tvar layer = this.serviceMap[type] + '/0' + '?token=' + this.temptoken; // 查询的服务\n\t\t\t\tvar allQueryPromise = []; // 所有请求数据 promise\n\t\t\t\tplotidlist.forEach(async (plotids, index) => {\n\t\t\t\t\tallQueryPromise.push(this.serverQuery(layer, this.plotQueryfn(plotids, type)));\n\t\t\t\t});\n\t\t\t\tPromise.all(allQueryPromise).then(res => {\n\t\t\t\t\tvar result = false;\n\t\t\t\t\tvar feature = [];\n\t\t\t\t\tres.forEach(([resultitem, featureitem], index) => {\n\t\t\t\t\t\tif (resultitem) result = true;\n\t\t\t\t\t\tfeature.push(...featureitem);\n\t\t\t\t\t});\n\t\t\t\t\tresolve([result, feature]);\n\t\t\t\t});\n\n\t\t\t\tfunction arrToThousandArr(arr, multiple) {\n\t\t\t\t\tif (arr.length > multiple) {\n\t\t\t\t\t\treturn [arr.splice(0, multiple), ...arrToThousandArr(arr, multiple)];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [arr];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tserverQuery(layerUrl, conditionfn) {\n\t\t\t// 某个类型服务 查询主体或地块id\n\t\t\tvar This = this;\n\t\t\tvar originalData = [];\n\t\t\tvar dapengNum = 0;\n\t\t\tvar nongyongdiNum = 0;\n\t\t\treturn new Promise(resolve => {\n\t\t\t\tesriLoader\n\t\t\t\t\t.loadModules(\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'esri/map',\n\t\t\t\t\t\t\t'esri/layers/ArcGISDynamicMapServiceLayer',\n\t\t\t\t\t\t\t'esri/tasks/QueryTask',\n\t\t\t\t\t\t\t'esri/toolbars/draw',\n\t\t\t\t\t\t\t'esri/tasks/query',\n\t\t\t\t\t\t\t'esri/symbols/SimpleLineSymbol',\n\t\t\t\t\t\t\t'esri/symbols/SimpleFillSymbol'\n\t\t\t\t\t\t],\n\t\t\t\t\t\tthis.options\n\t\t\t\t\t)\n\t\t\t\t\t.then(([Map, ArcGISDynamicMapServiceLayer, QueryTask, Draw, Query, SimpleLineSymbol, SimpleFillSymbol]) => {\n\t\t\t\t\t\tvar queryTask = new QueryTask(layerUrl);\n\t\t\t\t\t\tvar query = new Query();\n\t\t\t\t\t\tquery.outFields = ['*'];\n\t\t\t\t\t\t// 搜索条件 由函数返回\n\t\t\t\t\t\tif (conditionfn) query.where = conditionfn();\n\t\t\t\t\t\tif (!query.where) {\n\t\t\t\t\t\t\tresolve([false, []]);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// query.where = \"LANDTYPE='N0102'\"+\" and \"+\"ZHUTINAME='上海闵优果蔬种植专业合作社'\";\n\t\t\t\t\t\tquery.outSpatialReference = esri.spatialReference;\n\t\t\t\t\t\t// 查询的标准，此处代表和geometry相交的图形都要返回\n\t\t\t\t\t\tquery.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n\t\t\t\t\t\t// 是否返回几何信息\n\t\t\t\t\t\tquery.returnGeometry = true;\n\t\t\t\t\t\tquery.returnDistinctValues = false;\n\t\t\t\t\t\tquery.relationParam = false;\n\t\t\t\t\t\t// 执行空间查询\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tqueryTask.execute(query, queryResult => {\n\t\t\t\t\t\t\t\t// console.log('———————————————————————— 查询结果 ——————————————————————————————');\n\t\t\t\t\t\t\t\t// console.log(queryResult);\n\t\t\t\t\t\t\t\tif (!queryResult.features || queryResult.features.length === 0) {\n\t\t\t\t\t\t\t\t\tresolve([false, []]);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresolve([true, queryResult.features]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tresolve([false, []]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\tplotQueryfn(plotidlist, type) {\n\t\t\tvar key = 'DPDKID';\n\t\t\tvar plotids = plotidlist || [];\n\t\t\tplotids = plotids.filter(id => {\n\t\t\t\tif (id) {\n\t\t\t\t\treturn id;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (type === 'nongyongdi') {\n\t\t\t\tkey = 'DKID';\n\t\t\t}\n\t\t\treturn function() {\n\t\t\t\tvar constr = '';\n\t\t\t\tfor (var i = 0; i < plotids.length; i++) {\n\t\t\t\t\tif (!plotids[i]) continue;\n\t\t\t\t\tif (i === plotids.length - 1) {\n\t\t\t\t\t\tconstr += key + \" = '\" + plotids[i] + \"'\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconstr += key + \" = '\" + plotids[i] + \"' or \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn constr;\n\t\t\t};\n\t\t},\n\t\tgreenCertLandActive(gisids = []) {\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tthis.greenCertPlotsLayer.clear();\n\t\t\t\tif (!this.allPlotPolygonLayer.plotFeatures || this.allPlotPolygonLayer.plotFeatures.length === 0) {\n\t\t\t\t\tresolve(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar result = await this.updateFeature(gisids, this.allPlotPolygonLayer.plotFeatures, this.greenCertPlotsLayer, {\n\t\t\t\t\tstroke: [255, 255, 255],\n\t\t\t\t\tfillOpacity: 0.6,\n\t\t\t\t\tfill: [118, 255, 3]\n\t\t\t\t});\n\t\t\t\tif (gisids.length && result) {\n\t\t\t\t\tawait this.getCenterAZoom(this.greenCertPlotsLayer.graphics);\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t},\n\t\tcropLandActiveRender(gisids = [], isLand) {\n\t\t\treturn new Promise(async resolve => {\n\t\t\t\tthis.activePlotsLayer.clear();\n\t\t\t\tvar result = await this.updateFeature(gisids, this.allPlotPolygonLayer.plotFeatures, this.activePlotsLayer, {\n\t\t\t\t\tstroke: [255, 255, 255],\n\t\t\t\t\tfillOpacity: 0.6\n\t\t\t\t});\n\t\t\t\tif (gisids.length && result) {\n\t\t\t\t\tvar type = isLand ? 'plot' : 'company';\n\t\t\t\t\tvar plotExtent = this.activePlotsLayer.graphics[0]._extent;\n\t\t\t\t\tawait this.getCenterAZoom(this.activePlotsLayer.graphics, type);\n\t\t\t\t}\n\t\t\t\tresolve(result);\n\t\t\t});\n\t\t},\n\t\tsetPlotPosition(extentLatlng) {\n\t\t\tesriLoader\n\t\t\t\t.loadModules(\n\t\t\t\t\t[\n\t\t\t\t\t\t'esri/map',\n\t\t\t\t\t\t'esri/layers/ArcGISTiledMapServiceLayer',\n\t\t\t\t\t\t'esri/layers/ArcGISDynamicMapServiceLayer',\n\t\t\t\t\t\t'esri/layers/ImageParameters',\n\t\t\t\t\t\t'esri/geometry/Point',\n\t\t\t\t\t\t'esri/SpatialReference',\n\t\t\t\t\t\t'esri/geometry/Extent',\n\t\t\t\t\t\t'esri/layers/GraphicsLayer'\n\t\t\t\t\t],\n\t\t\t\t\tthis.options\n\t\t\t\t)\n\t\t\t\t.then(([Map, ArcGISTiledMapServiceLayer, ArcGISDynamicMapServiceLayer, ImageParameters, Point, SpatialReference, Extent, GraphicsLayer]) => {\n\t\t\t\t\tvar This = this;\n\t\t\t\t\tconsole.log(extentLatlng);\n\t\t\t\t\tvar startExtent = new Extent(...extentLatlng, new esri.SpatialReference({wkid: 4326}));\n\t\t\t\t\tthis.gismap.setExtent(startExtent, true);\n\t\t\t\t});\n\t\t},\n\t\tgetNYDid(landid) {\n\t\t\tvar reg = /(\\d{18})(\\d{3})/g;\n\t\t\tif (reg.test(landid)) {\n\t\t\t\tvar frontNumber = RegExp.$1; // 前面18位数字\n\t\t\t\treturn frontNumber + '000';\n\t\t\t} else {\n\t\t\t\treturn landid + '';\n\t\t\t}\n\t\t}\n\t},\n\tcomponents: {}\n};\n</script>\n<style scoped lang=\"scss\">\n@import url('http://gov.snkoudai.com/mapdemo/arcgis3.28/esri/css/esri.css');\n@import '~styles/gismap/esri-comon';\n/deep/ .el-dialog__wrapper {\n\ttop: 0px !important;\n}\n/deep/ #gismap_weixing_ditu {\n\topacity: 0.8 !important;\n}\n.map-loader {\n\twidth: 100vw;\n\theight: 100vh;\n}\n.map-container {\n\twidth: 100%;\n\theight: 100%;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tz-index: 1;\n\tbackground-color: #011b29;\n\toverflow: hidden;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/recycle-bin/farmdetail-map-other-废弃.vue"],"mappings":"AAcA","sourceRoot":""}