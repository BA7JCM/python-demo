{"version":3,"file":"static/js/91.74fa7c76ed93f80aa8f8.js","sources":["webpack:///src/components/common/scrollView.vue"],"sourcesContent":["<template>\r\n  <div ref=\"wrapper\" class=\"scroll-wrapper\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\nimport BScroll from '@better-scroll/core';\r\nimport MouseWheel from '@better-scroll/mouse-wheel';\r\nimport ObserveDom from '@better-scroll/observe-dom';\r\nimport ScrollBar from '@better-scroll/scroll-bar';\r\nimport Pullup from '@better-scroll/pull-up';\r\n\r\nBScroll.use(ScrollBar);\r\nBScroll.use(ObserveDom);\r\nBScroll.use(MouseWheel);\r\nBScroll.use(Pullup);\r\n\r\nexport default {\r\n  props: {\r\n    /**\r\n       * 1 滚动的时候会派发scroll事件，会截流。\r\n       * 2 滚动的时候实时派发scroll事件，不会截流。\r\n       * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\r\n       */\r\n    probeType: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    /**\r\n       * 点击列表是否派发click事件\r\n       */\r\n    click: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    /**\r\n       * 是否开启横向滚动\r\n       */\r\n    scrollX: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n       * 是否派发滚动事件\r\n       */\r\n    listenScroll: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n       * 列表的数据\r\n       */\r\n    data: {\r\n      type: Array,\r\n      default: null\r\n    },\r\n    /**\r\n       * 是否派发滚动到底部的事件，用于上拉加载\r\n       */\r\n    pullup: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n       * 是否派发顶部下拉的事件，用于下拉刷新\r\n       */\r\n    pulldown: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n       * 是否派发列表滚动开始的事件\r\n       */\r\n    beforeScroll: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n       * 当数据更新后，刷新scroll的延时。\r\n       */\r\n    refreshDelay: {\r\n      type: Number,\r\n      default: 20\r\n    }\r\n  },\r\n  mounted () {\r\n    // 保证在DOM渲染完毕后初始化better-scroll\r\n    setTimeout(() => {\r\n      this._initScroll();\r\n    }, 20);\r\n  },\r\n  methods: {\r\n    _initScroll () {\r\n      if (!this.$refs.wrapper) {\r\n        return;\r\n      }\r\n      // better-scroll的初始化\r\n      this.scroll = new BScroll(this.$refs.wrapper, {\r\n        probeType: this.probeType,\r\n        click: this.click,\r\n        scrollX: this.scrollX,\r\n        tap: 'tap',\r\n        freeScroll: true,\r\n        observeDom: true,\r\n        mouseWheel: {\r\n          speed: 20,\r\n          invert: false,\r\n          easeTime: 300\r\n        },\r\n        scrollbar: {\r\n          fade: false\r\n        },\r\n        disableMouse: false,\r\n        pullUpLoad: {\r\n          threshold: 0\r\n        }\r\n      });\r\n\r\n      // 是否派发滚动事件\r\n      if (this.listenScroll) {\r\n        this.scroll.on('scroll', (pos) => {\r\n          this.$emit('scroll', pos);\r\n        });\r\n      }\r\n\r\n      // 是否派发滚动到底部事件，用于上拉加载\r\n      if (this.pullup) {\r\n        this.scroll.on('pullingUp', () => {\r\n          console.log('刷新');\r\n        });\r\n      }\r\n\r\n      // 是否派发顶部下拉事件，用于下拉刷新\r\n      if (this.pulldown) {\r\n        this.scroll.on('touchend', (pos) => {\r\n          // 下拉动作\r\n          if (pos.y > 50) {\r\n            this.$emit('pulldown');\r\n          }\r\n        });\r\n      }\r\n\r\n      // 是否派发列表滚动开始的事件\r\n      if (this.beforeScroll) {\r\n        this.scroll.on('beforeScrollStart', () => {\r\n          this.$emit('beforeScroll');\r\n        });\r\n      }\r\n    },\r\n    disable () {\r\n      // 代理better-scroll的disable方法\r\n      this.scroll && this.scroll.disable();\r\n    },\r\n    enable () {\r\n      // 代理better-scroll的enable方法\r\n      this.scroll && this.scroll.enable();\r\n    },\r\n    refresh () {\r\n      // 代理better-scroll的refresh方法\r\n      this.scroll && this.scroll.refresh();\r\n    },\r\n    scrollTo () {\r\n      // 代理better-scroll的scrollTo方法\r\n      this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\r\n    },\r\n    scrollToElement () {\r\n      // 代理better-scroll的scrollToElement方法\r\n      this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments);\r\n    }\r\n  },\r\n  watch: {\r\n    // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\r\n    data () {\r\n      setTimeout(() => {\r\n        this.refresh();\r\n      }, this.refreshDelay);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .scroll-wrapper{\r\n    height: 100%;\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/components/common/scrollView.vue"],"mappings":"AAaA","sourceRoot":""}