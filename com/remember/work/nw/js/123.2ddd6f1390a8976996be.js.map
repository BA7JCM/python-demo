{"version":3,"file":"static/js/123.2ddd6f1390a8976996be.js","sources":["webpack:///src/pages/recycle-bin/map.vue"],"sourcesContent":["<template>\r\n  <!-- 此页面和气象监测一模一样， 用于给ui提供图形绘制的，尽量不要在非测试页面更改，以免忘记改正 -->\r\n  <div class=\"map-container\" v-title data-title=\"地图轮廓测试\">\r\n    <div class=\"scene-map\" ref=\"sceneMap\"></div>\r\n    <ul class=\"map-tabs\" v-if=\"tabs\">\r\n      <li class=\"tab\" v-for=\"(tab, index) in tabs\" :class=\"{select: index === selectedGis}\"\r\n          @click=\"handleSwitchGis(index)\">\r\n        <img class=\"type-icon\" :src=\"tab.typeIcon\" :alt=\"`${tab.typeName}图标`\">\r\n        <span>{{tab.typeName}}</span>\r\n      </li>\r\n    </ul>\r\n    <p class=\"update-time\" v-if=\"showUpdateTime\">{{getUpdateGisTime | znDateFormat(\"yyyy.MM.dd hh:mm\")}}更新</p>\r\n    <img class=\"legend\" v-if=\"showLegendPic\" :src=\"tabs[selectedGis].legendPic\" :alt=\"`${tabs[selectedGis].typeName}图例`\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'scene',\r\n  data () {\r\n    return {\r\n      areaLevel: null,\r\n      areaId: null,\r\n      map: null,\r\n      tabs: undefined,\r\n      selectedGis: 0,\r\n      oldLayers: null,\r\n      oldImageLayers: null,\r\n      serverTime: null\r\n    };\r\n  },\r\n  created () {\r\n    this.getAreaId();\r\n  },\r\n  mounted () {\r\n    this.$nextTick(async () => {\r\n      await this.getCenter();\r\n      await this.setTabs();\r\n    });\r\n  },\r\n  methods: {\r\n    /**\r\n       * 获取中心点\r\n       */\r\n    async getCenter () {\r\n      const district = await this.getDistrictExplorer();\r\n      const center = district.areaNode._data.geoData.parent.properties.center;\r\n      this.map = this._initMap({\r\n        el: this.$refs.sceneMap,\r\n        center: [center[1], center[0]]\r\n      });\r\n      this.drawPolygon({\r\n        districtExplorer: district.districtExplorer,\r\n        areaNode: district.areaNode,\r\n        map: this.map\r\n      });\r\n    },\r\n\r\n    /**\r\n       * 初始化地图\r\n       */\r\n    _initMap ({ el, center }) {\r\n      // 边界线>谷歌带导入卫星图>天地图卫星>高德2D地图\r\n      var boundLine = L.tileLayer.chinaProvider('TianDiTu.Realm.Map', {\t// 边境线\r\n        id: 'layer_line',\r\n        detectRetina: false,\r\n        zIndex: 5,\r\n        maxZoom: 21,\r\n        minZoom: 5\r\n      }); var satelliteMap = L.tileLayer.chinaProvider('Google.Satellite.Map', { // 谷歌卫星图无地名 (与谷歌地名标注资源 二选一)\r\n        id: 'layer_google',\r\n        detectRetina: false,\r\n        zIndex: 3, // 层级越高 越在上面\r\n        maxZoom: 21,\r\n        minZoom: 5\r\n      }); var ggAnnotionMap = L.tileLayer.chinaProvider('Google.Satellite.Annotion', { // 谷歌卫星图 有地名标注  (与谷歌无地名资源 二选一)\r\n        id: 'layer_google',\r\n        detectRetina: false,\r\n        zIndex: 3, // 层级越高 越在上面\r\n        maxZoom: 21,\r\n        minZoom: 5\r\n      }); var tianDiSatelliteMap = L.tileLayer.chinaProvider('TianDiTu.Satellite.Map', { // 天地卫星图\r\n        id: 'layer_tiandi',\r\n        detectRetina: false,\r\n        zIndex: 2,\r\n        maxZoom: 18,\r\n        minZoom: 5\r\n      }); var gaode2d = L.tileLayer.chinaProvider('GaoDe.Normal.Map', {\t// 高德 2D 地图\r\n        id: 'layer_gaodeLabel',\r\n        detectRetina: false,\r\n        zIndex: 1,\r\n        maxZoom: 18,\r\n        minZoom: 5\r\n      });\r\n      const map = L.map(el, {\r\n        layers: [boundLine, satelliteMap, tianDiSatelliteMap, gaode2d],\r\n        center: center,\r\n        zoom: 9,\r\n        zoomControl: false,\r\n        attributionControl: false,\r\n        dragging: true,\r\n        touchZoom: false,\r\n        scrollWheelZoom: true,\r\n        doubleClickZoom: true,\r\n        boxZoom: false,\r\n        tap: false,\r\n        keyboard: true,\r\n        maxZoom: 21,\r\n        minZoom: 5\r\n      });\r\n      return map;\r\n    },\r\n\r\n    /**\r\n       *  获取区域id\r\n       */\r\n    getAreaId () { // 获取区域id\r\n      let areaId = null;\r\n      const govSubject = JSON.parse(localStorage.getItem('govGovernmentSubjectVO'));\r\n      this.areaLevel = govSubject.subjectLevel;\r\n      switch (this.areaLevel) {\r\n        case 1:\r\n          areaId = govSubject.provinceId;\r\n          break;\r\n        case 2:\r\n          areaId = govSubject.cityId;\r\n          break;\r\n        default:\r\n          areaId = govSubject.countyId;\r\n          break;\r\n      }\r\n      this.areaId = areaId;\r\n    },\r\n\r\n    /**\r\n       * 获取行政区\r\n       */\r\n    async getDistrictExplorer () {\r\n      let _district = null;\r\n      await new Promise((resolve, reject) => {\r\n        if (!window.AMapUI) {\r\n          reject('需要引入高德jsapi\\nhttps://webapi.amap.com/maps?v=1.4.15&key=\"key\"\\nhttps://webapi.amap.com/ui/1.0/main.js');\r\n        }\r\n        AMapUI.loadUI(['geo/DistrictExplorer'], (DistrictExplorer) => {\r\n          const districtExplorer = new DistrictExplorer();\r\n          districtExplorer.loadAreaNode(this.areaId, (err, areaNode) => {\r\n            if (err) {\r\n              reject(err);\r\n            }\r\n            _district = {\r\n              areaNode,\r\n              districtExplorer\r\n            };\r\n\r\n            resolve(_district);\r\n          });\r\n        });\r\n      });\r\n      return _district;\r\n    },\r\n\r\n    /**\r\n       * 绘制轮廓\r\n       */\r\n    drawPolygon ({ districtExplorer, areaNode, map }) {\r\n      //  绘制父级区划，仅用黑色描边\r\n      L.geoJSON(areaNode.getParentFeature(), {\r\n        style () {\r\n          return {\r\n            color: '#FFFF33',\r\n            fillColor: '#009cba',\r\n            fillOpacity: 0,\r\n            fillRule: 'evenodd',\r\n            className: 'polygonbox',\r\n            lineJoin: 'miter',\r\n            weight: 3\r\n          };\r\n        }\r\n      }).addTo(map);\r\n    },\r\n\r\n    // 获取气象监测列表\r\n    async getGisList () {\r\n      let result = null;\r\n      await new Promise((resolve, reject) => {\r\n        this.$ajax.post(this.$api.scene.govGisTypeList, {})\r\n          .then(({ data: res }) => {\r\n            if (res.respCode === 0) {\r\n              this.serverTime = res.curDate;\r\n              result = res.obj;\r\n              return resolve(res.obj);\r\n            }\r\n            reject();\r\n          });\r\n      });\r\n      return result;\r\n    },\r\n\r\n    // 设置tabs\r\n    async setTabs () {\r\n      const tabs = await this.getGisList();\r\n      this.tabs = tabs.map((item) => {\r\n        return {\r\n          legendPic: item.imgUrl, // 图例图片\r\n          typeIcon: item.typeIcon, // 每一项的图标\r\n          typeName: item.typeName, // 每一项的名称\r\n          gisPics: item.typeImgVOS // 每一项的gis的名字\r\n        };\r\n      });\r\n      this.handleSwitchGis(0);\r\n    },\r\n\r\n    /**\r\n       * 切换gis 切换tabs\r\n       * author：NewBlue\r\n       * @param index\r\n       */\r\n    handleSwitchGis (index) {\r\n      try {\r\n        const urlReg = /(http[s]?:\\/\\/)[a-zA-Z0-9\\.\\/\\_\\-\\:]*(?=\\?)/;\r\n        const layersReg = /(layers=)([a-zA-Z0-9\\%\\_\\-]*)(\\&)/;\r\n        const gisUrl = this.tabs[index].gisPics[0].gisImgUrl;\r\n        const pngImgUrl = this.tabs[index].gisPics[0].pngImgUrl;\r\n        // console.log(pngImgUrl);\r\n        let wmsLayer, group, coord;\r\n        if (gisUrl) {\r\n          wmsLayer = L.tileLayer.wms(gisUrl.match(urlReg)[0], {\r\n            layers: decodeURIComponent(gisUrl.match(layersReg)[2]), // 需要加载的图层\r\n            format: 'image/png', // 返回的数据格式\r\n            transparent: true,\r\n            crs: L.CRS.EPSG4326,\r\n            maxZoom: 20,\r\n            minZoom: 5,\r\n            zIndex: 9\r\n          });\r\n          group = L.layerGroup();\r\n\r\n          // 上一个图片层移除\r\n          if (this.oldImageLayers) {\r\n            this.oldImageLayers.remove();\r\n            this.oldImageLayers = null;\r\n          }\r\n\r\n          // 上一个瓦片层移除\r\n          if (this.oldLayers) {\r\n            this.oldLayers.remove();\r\n          }\r\n          group.addLayer(wmsLayer);\r\n          // 本次加载的瓦片图层\r\n          this.oldLayers = wmsLayer;\r\n        } else {\r\n          coord = this.tabs[index].gisPics[0].imgPath.split(',').map(Number);\r\n          group = L.imageOverlay(pngImgUrl, [[coord[3], coord[2]], [coord[1], coord[0]]], {\r\n            opacity: 1,\r\n            maxZoom: 20,\r\n            minZoom: 5,\r\n            zIndex: 9,\r\n            pane: 'tilePane' // 可以将窗口设置与tilePane同层这样就可以设置层级\r\n          });\r\n\r\n          // 上一个图片层移除\r\n          if (this.oldImageLayers) {\r\n            this.oldImageLayers.remove();\r\n          }\r\n\r\n          // 上一个瓦片层移除\r\n          if (this.oldLayers) {\r\n            this.oldLayers.remove();\r\n            this.oldLayers = null;\r\n          }\r\n          this.oldImageLayers = group;\r\n        }\r\n\r\n        group.addTo(this.map);\r\n        // 选中的标签\r\n        this.selectedGis = index;\r\n      } catch (e) {\r\n        console.warn('数据配置不正确', e);\r\n      } finally {\r\n        // console.log('数据配置不正确，无法切换');\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    getUpdateGisTime () {\r\n      const minutes = new Date(this.serverTime).getMinutes();\r\n      const tab = this.tabs[this.selectedGis];\r\n      let updateTime = new Date(this.serverTime).setMinutes(parseInt(minutes / 10) * 10);\r\n      if (tab.gisPics[0]) {\r\n        updateTime = tab.gisPics[0].gisDataUpdateTime || updateTime;\r\n      }\r\n\r\n      return updateTime;\r\n    },\r\n    showUpdateTime () {\r\n      return this.tabs && this.tabs[this.selectedGis].gisPics.length > 0;\r\n    },\r\n    showLegendPic () {\r\n      return (this.tabs && this.tabs[this.selectedGis].legendPic);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .map-container {\r\n    &, .scene-map {\r\n      position: fixed;\r\n      top: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n      z-index: 90;\r\n    }\r\n\r\n    > .map-tabs {\r\n      position: absolute;\r\n      top: 150px;\r\n      left: 70px;\r\n      z-index: 99;\r\n\r\n      .tab {\r\n        color: #fff;\r\n        width: 120px;\r\n        height: 40px;\r\n        background-color: rgba(0, 0, 0, .7);\r\n        border-radius: 20px;\r\n        font-size: 14px;\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0 10px;\r\n        box-sizing: border-box;\r\n        cursor: pointer;\r\n        user-select: none;\r\n\r\n        + .tab {\r\n          margin-top: 24px;\r\n        }\r\n\r\n        .iconfont {\r\n          font-size: 22px;\r\n          margin-right: 5px;\r\n        }\r\n\r\n        .type-icon {\r\n          max-width: 30px;\r\n          max-height: 30px;\r\n          margin-right: 5px;\r\n        }\r\n\r\n        &.select {\r\n          background-color: #F1A637;\r\n        }\r\n      }\r\n    }\r\n\r\n    .update-time {\r\n      padding: 0 20px;\r\n      height: 30px;\r\n      line-height: 30px;\r\n      position: absolute;\r\n      bottom: 30px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      z-index: 99;\r\n      color: #fff;\r\n      font-size: 14px;\r\n      box-sizing: border-box;\r\n      border-radius: 15px;\r\n      background-color: rgba(0, 0, 0, .7);\r\n      user-select: none;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .legend {\r\n      position: absolute;\r\n      z-index: 99;\r\n      bottom: 30px;\r\n      right: 38px;\r\n      border: 0 none;\r\n      box-sizing: border-box;\r\n    }\r\n  }\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/pages/recycle-bin/map.vue"],"mappings":"AAiBA","sourceRoot":""}